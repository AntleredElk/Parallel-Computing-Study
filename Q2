2.1) Deadlock occurs when multiple threads are competing for resources and are stuck waiting on each other. In the case of our implementation, 2 threads share 2 locks. More specifically, one thread, while having acquired one lock, will attempt to acquire the other. This is problematic, because that other lock was already acquired by a different thread which is also doing the same thing. Because both threads are hogging resources, neither can proceed. 

2.2) A possible design solution in our implementation is to simply avoid using "nested" locks. That is to say, a thread should release a lock before proceeding to obtain another one. Essentially, we would like for the threads to yield to each other. We can further elaborate on this by having threads declare themselves as victims to yield. Additional design solutions include a flagging system, such that different threads are aware of who wants access to what. 
